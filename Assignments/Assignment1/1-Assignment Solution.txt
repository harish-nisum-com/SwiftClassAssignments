//: Playground - noun: a place where people can play

import UIKit

enum EntityType {
    case Bin
    case Item
    case Location
}

class EntityBase    {
    var name:String?
    var entityType:EntityType?

    init(name:String, entityTypeName:String)    {
        self.name = name
        self.entityType = EntityBase.getEntityType(fromString:entityTypeName)
    }
    
    init(name:String, entityType:EntityType)   {
        self.name = name
        self.entityType = entityType
    }
    
    static func getEntityType(fromString:String) -> EntityType? {
        var entityType:EntityType?
        switch (fromString) {
            case String(describing:EntityType.Bin):
                entityType = EntityType.Bin
            case String(describing:EntityType.Item):
                entityType = EntityType.Item
            case String(describing:EntityType.Location):
                entityType = EntityType.Location
            default: break
        }
        return entityType
    }
    
    //Doesn't work because self is not available until after init is complete
//    func getEntityType(fromObject:EntityBase) -> EntityType? {
//        return EntityBase.getEntityType(fromString: String(describing:type(of:self)))
//    }
}

class Item:EntityBase {
    var bin:Bin?
    
    convenience init(name:String, bin:Bin)   {
        self.init(name:name)
        self.bin = bin
    }
    
    init(name:String)   {
        super.init(name:name, entityTypeName:String(describing:type(of:self)))
    }
}

class Bin:EntityBase {
    var location:Location?
    
    convenience init(name:String, location:Location)   {
        self.init(name:name)
        self.location = location
    }
    
    init(name:String)   {
        super.init(name:name, entityTypeName:String(describing:type(of:self)))
    }
}

class Location:EntityBase {
    init(name:String)   {
        super.init(name:name, entityTypeName:String(describing:type(of:self)))
    }
}

var item = Item(name:"1.75\" Brushed Nickel Knobs", bin:Bin(name: "Red drawer #2", location: Location(name: "Kitchen closet")))

if let locationName = item.bin?.location?.name {
    print("Item location is \(locationName)")
}

let entityArray = [item, item.bin!, item.bin!.location!] as [EntityBase]
for entity in entityArray {
    print("\(entity.name!) is a \(entity.entityType!) instance")
}